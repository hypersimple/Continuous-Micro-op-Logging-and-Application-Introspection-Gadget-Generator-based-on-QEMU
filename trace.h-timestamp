/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_H
#define TRACE_H

#include "qemu-common.h"

static inline void trace_qxl_interface_set_mm_time(int qid, uint32_t mm_time)
{
}

static inline void trace_qxl_io_write_vga(int qid, const char * mode, uint32_t addr, uint32_t val)
{
}

static inline void trace_g_malloc(size_t size, void * ptr)
{
}

static inline void trace_g_realloc(void * ptr, size_t size, void * newptr)
{
}

static inline void trace_g_free(void * ptr)
{
}

static inline void trace_qemu_memalign(size_t alignment, size_t size, void * ptr)
{
}

static inline void trace_qemu_vmalloc(size_t size, void * ptr)
{
}

static inline void trace_qemu_vfree(void * ptr)
{
}

static inline void trace_virtqueue_fill(void * vq, const void * elem, unsigned int len, unsigned int idx)
{
}

static inline void trace_virtqueue_flush(void * vq, unsigned int count)
{
}

static inline void trace_virtqueue_pop(void * vq, void * elem, unsigned int in_num, unsigned int out_num)
{
}

static inline void trace_virtio_queue_notify(void * vdev, int n, void * vq)
{
}

static inline void trace_virtio_irq(void * vq)
{
}

static inline void trace_virtio_notify(void * vdev, void * vq)
{
}

static inline void trace_virtio_set_status(void * vdev, uint8_t val)
{
}

static inline void trace_virtio_serial_send_control_event(unsigned int port, uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_throttle_port(unsigned int port, bool throttle)
{
}

static inline void trace_virtio_serial_handle_control_message(uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_handle_control_message_port(unsigned int port)
{
}

static inline void trace_virtio_console_flush_buf(unsigned int port, size_t len, ssize_t ret)
{
}

static inline void trace_virtio_console_chr_read(unsigned int port, int size)
{
}

static inline void trace_virtio_console_chr_event(unsigned int port, int event)
{
}

static inline void trace_bdrv_open_common(void * bs, const char * filename, int flags, const char * format_name)
{
}

static inline void trace_multiwrite_cb(void * mcb, int ret)
{
}

static inline void trace_bdrv_aio_multiwrite(void * mcb, int num_callbacks, int num_reqs)
{
}

static inline void trace_bdrv_aio_discard(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_aio_flush(void * bs, void * opaque)
{
}

static inline void trace_bdrv_aio_readv(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_aio_writev(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_lock_medium(void * bs, bool locked)
{
}

static inline void trace_bdrv_co_readv(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_copy_on_readv(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_writev(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_write_zeroes(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_io_em(void * bs, int64_t sector_num, int nb_sectors, int is_write, void * acb)
{
}

static inline void trace_bdrv_co_do_copy_on_readv(void * bs, int64_t sector_num, int nb_sectors, int64_t cluster_sector_num, int cluster_nb_sectors)
{
}

static inline void trace_stream_one_iteration(void * s, int64_t sector_num, int nb_sectors, int is_allocated)
{
}

static inline void trace_stream_start(void * bs, void * base, void * s, void * co, void * opaque)
{
}

static inline void trace_qmp_block_job_cancel(void * job)
{
}

static inline void trace_block_stream_cb(void * bs, void * job, int ret)
{
}

static inline void trace_qmp_block_stream(void * bs, void * job)
{
}

static inline void trace_virtio_blk_req_complete(void * req, int status)
{
}

static inline void trace_virtio_blk_rw_complete(void * req, int ret)
{
}

static inline void trace_virtio_blk_handle_write(void * req, uint64_t sector, size_t nsectors)
{
}

static inline void trace_virtio_blk_handle_read(void * req, uint64_t sector, size_t nsectors)
{
}

static inline void trace_paio_submit(void * acb, void * opaque, int64_t sector_num, int nb_sectors, int type)
{
}

static inline void trace_paio_complete(void * acb, void * opaque, int ret)
{
}

static inline void trace_paio_cancel(void * acb, void * opaque)
{
}

static inline void trace_cpu_in(unsigned int addr, unsigned int val)
{
}

static inline void trace_cpu_out(unsigned int addr, unsigned int val)
{
}

static inline void trace_balloon_event(void * opaque, unsigned long addr)
{
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_nvram_read(uint32_t addr, uint32_t ret)
{
}

static inline void trace_nvram_write(uint32_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
}

static inline void trace_jazz_led_read(uint64_t addr, uint8_t val)
{
}

static inline void trace_jazz_led_write(uint64_t addr, uint8_t new)
{
}

static inline void trace_lance_mem_readw(uint64_t addr, uint32_t ret)
{
}

static inline void trace_lance_mem_writew(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
}

static inline void trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
}

static inline void trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
}

static inline void trace_slavio_timer_mem_writel_counter_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
}

static inline void trace_ledma_memory_read(uint64_t addr)
{
}

static inline void trace_ledma_memory_write(uint64_t addr)
{
}

static inline void trace_sparc32_dma_set_irq_raise(void)
{
}

static inline void trace_sparc32_dma_set_irq_lower(void)
{
}

static inline void trace_espdma_memory_read(uint32_t addr)
{
}

static inline void trace_espdma_memory_write(uint32_t addr)
{
}

static inline void trace_sparc32_dma_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sparc32_dma_mem_writel(uint64_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_sparc32_dma_enable_raise(void)
{
}

static inline void trace_sparc32_dma_enable_lower(void)
{
}

static inline void trace_sun4m_cpu_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_reset_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_set_irq_raise(int level)
{
}

static inline void trace_sun4m_cpu_set_irq_lower(int level)
{
}

static inline void trace_sun4m_iommu_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_ctrl(uint64_t iostart)
{
}

static inline void trace_sun4m_iommu_mem_writel_tlbflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_pgflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_page_get_flags(uint64_t pa, uint64_t iopte, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_translate_pa(uint64_t addr, uint64_t pa, uint32_t iopte)
{
}

static inline void trace_sun4m_iommu_bad_addr(uint64_t addr)
{
}

static inline void trace_usb_packet_state_change(int bus, const char * port, int ep, void * p, const char * o, const char * n)
{
}

static inline void trace_usb_packet_state_fault(int bus, const char * port, int ep, void * p, const char * o, const char * n)
{
}

static inline void trace_usb_port_claim(int bus, const char * port)
{
}

static inline void trace_usb_port_attach(int bus, const char * port)
{
}

static inline void trace_usb_port_detach(int bus, const char * port)
{
}

static inline void trace_usb_port_release(int bus, const char * port)
{
}

static inline void trace_usb_ehci_reset(void)
{
}

static inline void trace_usb_ehci_mmio_readl(uint32_t addr, const char * str, uint32_t val)
{
}

static inline void trace_usb_ehci_mmio_writel(uint32_t addr, const char * str, uint32_t val)
{
}

static inline void trace_usb_ehci_mmio_change(uint32_t addr, const char * str, uint32_t new, uint32_t old)
{
}

static inline void trace_usb_ehci_usbsts(const char * sts, int state)
{
}

static inline void trace_usb_ehci_state(const char * schedule, const char * state)
{
}

static inline void trace_usb_ehci_qh_ptrs(void * q, uint32_t addr, uint32_t nxt, uint32_t c_qtd, uint32_t n_qtd, uint32_t a_qtd)
{
}

static inline void trace_usb_ehci_qh_fields(uint32_t addr, int rl, int mplen, int eps, int ep, int devaddr)
{
}

static inline void trace_usb_ehci_qh_bits(uint32_t addr, int c, int h, int dtc, int i)
{
}

static inline void trace_usb_ehci_qtd_ptrs(void * q, uint32_t addr, uint32_t nxt, uint32_t altnext)
{
}

static inline void trace_usb_ehci_qtd_fields(uint32_t addr, int tbytes, int cpage, int cerr, int pid)
{
}

static inline void trace_usb_ehci_qtd_bits(uint32_t addr, int ioc, int active, int halt, int babble, int xacterr)
{
}

static inline void trace_usb_ehci_itd(uint32_t addr, uint32_t nxt, uint32_t mplen, uint32_t mult, uint32_t ep, uint32_t devaddr)
{
}

static inline void trace_usb_ehci_sitd(uint32_t addr, uint32_t nxt, uint32_t active)
{
}

static inline void trace_usb_ehci_port_attach(uint32_t port, const char * device)
{
}

static inline void trace_usb_ehci_port_detach(uint32_t port)
{
}

static inline void trace_usb_ehci_port_reset(uint32_t port, int enable)
{
}

static inline void trace_usb_ehci_data(int rw, uint32_t cpage, uint32_t offset, uint32_t addr, uint32_t len, uint32_t bufpos)
{
}

static inline void trace_usb_ehci_queue_action(void * q, const char * action)
{
}

static inline void trace_usb_uhci_reset(void)
{
}

static inline void trace_usb_uhci_schedule_start(void)
{
}

static inline void trace_usb_uhci_schedule_stop(void)
{
}

static inline void trace_usb_uhci_frame_start(uint32_t num)
{
}

static inline void trace_usb_uhci_frame_loop_stop_idle(void)
{
}

static inline void trace_usb_uhci_frame_loop_stop_bandwidth(void)
{
}

static inline void trace_usb_uhci_frame_loop_continue(void)
{
}

static inline void trace_usb_uhci_mmio_readw(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_mmio_writew(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_mmio_readl(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_mmio_writel(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_queue_add(uint32_t token)
{
}

static inline void trace_usb_uhci_queue_del(uint32_t token)
{
}

static inline void trace_usb_uhci_packet_add(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_link_async(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_unlink_async(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_cancel(uint32_t token, uint32_t addr, int done)
{
}

static inline void trace_usb_uhci_packet_complete_success(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_shortxfer(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_stall(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_babble(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_error(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_del(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_qh_load(uint32_t qh)
{
}

static inline void trace_usb_uhci_td_load(uint32_t qh, uint32_t td, uint32_t ctrl, uint32_t token)
{
}

static inline void trace_usb_uhci_td_queue(uint32_t td, uint32_t ctrl, uint32_t token)
{
}

static inline void trace_usb_uhci_td_nextqh(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_uhci_td_async(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_uhci_td_complete(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_desc_device(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_device_qualifier(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_other_speed_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_string(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_set_addr(int addr)
{
}

static inline void trace_usb_set_config(int addr, int config, int ret)
{
}

static inline void trace_usb_set_interface(int addr, int iface, int alt, int ret)
{
}

static inline void trace_usb_clear_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_set_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_hub_reset(int addr)
{
}

static inline void trace_usb_hub_control(int addr, int request, int value, int index, int length)
{
}

static inline void trace_usb_hub_get_port_status(int addr, int nr, int status, int changed)
{
}

static inline void trace_usb_hub_set_port_feature(int addr, int nr, const char * f)
{
}

static inline void trace_usb_hub_clear_port_feature(int addr, int nr, const char * f)
{
}

static inline void trace_usb_hub_attach(int addr, int nr)
{
}

static inline void trace_usb_hub_detach(int addr, int nr)
{
}

static inline void trace_usb_host_open_started(int bus, int addr)
{
}

static inline void trace_usb_host_open_success(int bus, int addr)
{
}

static inline void trace_usb_host_open_failure(int bus, int addr)
{
}

static inline void trace_usb_host_disconnect(int bus, int addr)
{
}

static inline void trace_usb_host_close(int bus, int addr)
{
}

static inline void trace_usb_host_set_address(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_config(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_interface(int bus, int addr, int interface, int alt)
{
}

static inline void trace_usb_host_claim_interfaces(int bus, int addr, int config, int nif)
{
}

static inline void trace_usb_host_release_interfaces(int bus, int addr)
{
}

static inline void trace_usb_host_req_control(int bus, int addr, void * p, int req, int value, int index)
{
}

static inline void trace_usb_host_req_data(int bus, int addr, void * p, int in, int ep, int size)
{
}

static inline void trace_usb_host_req_complete(int bus, int addr, void * p, int status)
{
}

static inline void trace_usb_host_req_emulated(int bus, int addr, void * p, int status)
{
}

static inline void trace_usb_host_req_canceled(int bus, int addr, void * p)
{
}

static inline void trace_usb_host_urb_submit(int bus, int addr, void * aurb, int length, int more)
{
}

static inline void trace_usb_host_urb_complete(int bus, int addr, void * aurb, int status, int length, int more)
{
}

static inline void trace_usb_host_urb_canceled(int bus, int addr, void * aurb)
{
}

static inline void trace_usb_host_ep_set_halt(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_clear_halt(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_start_iso(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_ep_stop_iso(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_reset(int bus, int addr)
{
}

static inline void trace_usb_host_auto_scan_enabled(void)
{
}

static inline void trace_usb_host_auto_scan_disabled(void)
{
}

static inline void trace_usb_host_claim_port(int bus, int hub, int port)
{
}

static inline void trace_usb_host_parse_device(int bus, int addr, int vendor, int product)
{
}

static inline void trace_usb_host_parse_config(int bus, int addr, int value, int active)
{
}

static inline void trace_usb_host_parse_interface(int bus, int addr, int num, int alt, int active)
{
}

static inline void trace_usb_host_parse_endpoint(int bus, int addr, int ep, const char * dir, const char * type, int active)
{
}

static inline void trace_usb_host_parse_unknown(int bus, int addr, int len, int type)
{
}

static inline void trace_usb_host_parse_error(int bus, int addr, const char * errmsg)
{
}

static inline void trace_scsi_req_alloc(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_data(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_data_canceled(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_dequeue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_continue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_parsed(int target, int lun, int tag, int cmd, int mode, int xfer)
{
}

static inline void trace_scsi_req_parsed_lba(int target, int lun, int tag, int cmd, uint64_t lba)
{
}

static inline void trace_scsi_req_parse_bad(int target, int lun, int tag, int cmd)
{
}

static inline void trace_scsi_req_build_sense(int target, int lun, int tag, int key, int asc, int ascq)
{
}

static inline void trace_scsi_report_luns(int target, int lun, int tag)
{
}

static inline void trace_scsi_inquiry(int target, int lun, int tag, int cdb1, int cdb2)
{
}

static inline void trace_scsi_test_unit_ready(int target, int lun, int tag)
{
}

static inline void trace_scsi_request_sense(int target, int lun, int tag)
{
}

static inline void trace_vm_state_notify(int running, int reason)
{
}

static inline void trace_qcow2_writev_start_req(void * co, int64_t sector, int nb_sectors)
{
}

static inline void trace_qcow2_writev_done_req(void * co, int ret)
{
}

static inline void trace_qcow2_writev_start_part(void * co)
{
}

static inline void trace_qcow2_writev_done_part(void * co, int cur_nr_sectors)
{
}

static inline void trace_qcow2_writev_data(void * co, uint64_t offset)
{
}

static inline void trace_qcow2_alloc_clusters_offset(void * co, uint64_t offset, int n_start, int n_end)
{
}

static inline void trace_qcow2_do_alloc_clusters_offset(void * co, uint64_t guest_offset, uint64_t host_offset, int nb_clusters)
{
}

static inline void trace_qcow2_cluster_alloc_phys(void * co)
{
}

static inline void trace_qcow2_cluster_link_l2(void * co, int nb_clusters)
{
}

static inline void trace_qcow2_l2_allocate(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_get_empty(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_write_l2(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_write_l1(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_done(void * bs, int l1_index, int ret)
{
}

static inline void trace_qcow2_cache_get(void * co, int c, uint64_t offset, bool read_from_disk)
{
}

static inline void trace_qcow2_cache_get_replace_entry(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_get_read(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_get_done(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_flush(void * co, int c)
{
}

static inline void trace_qcow2_cache_entry_flush(void * co, int c, int i)
{
}

static inline void trace_qed_alloc_l2_cache_entry(void * l2_cache, void * entry)
{
}

static inline void trace_qed_unref_l2_cache_entry(void * entry, int ref)
{
}

static inline void trace_qed_find_l2_cache_entry(void * l2_cache, void * entry, uint64_t offset, int ref)
{
}

static inline void trace_qed_read_table(void * s, uint64_t offset, void * table)
{
}

static inline void trace_qed_read_table_cb(void * s, void * table, int ret)
{
}

static inline void trace_qed_write_table(void * s, uint64_t offset, void * table, unsigned int index, unsigned int n)
{
}

static inline void trace_qed_write_table_cb(void * s, void * table, int flush, int ret)
{
}

static inline void trace_qed_need_check_timer_cb(void * s)
{
}

static inline void trace_qed_start_need_check_timer(void * s)
{
}

static inline void trace_qed_cancel_need_check_timer(void * s)
{
}

static inline void trace_qed_aio_complete(void * s, void * acb, int ret)
{
}

static inline void trace_qed_aio_setup(void * s, void * acb, int64_t sector_num, int nb_sectors, void * opaque, int flags)
{
}

static inline void trace_qed_aio_next_io(void * s, void * acb, int ret, uint64_t cur_pos)
{
}

static inline void trace_qed_aio_read_data(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_data(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_prefill(void * s, void * acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_postfill(void * s, void * acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_main(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_g364fb_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_g364fb_write(uint64_t addr, uint32_t new)
{
}

static inline void trace_grlib_gptimer_enable(int id, uint32_t count)
{
}

static inline void trace_grlib_gptimer_disabled(int id, uint32_t config)
{
}

static inline void trace_grlib_gptimer_restart(int id, uint32_t reload)
{
}

static inline void trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
}

static inline void trace_grlib_gptimer_hit(int id)
{
}

static inline void trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
}

static inline void trace_grlib_irqmp_ack(int intno)
{
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_apbuart_event(int event)
{
}

static inline void trace_grlib_apbuart_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_apbuart_readl_unknown(uint64_t addr)
{
}

static inline void trace_leon3_set_irq(int intno)
{
}

static inline void trace_leon3_reset_irq(int intno)
{
}

static inline void trace_spice_vmc_write(ssize_t out, int len)
{
}

static inline void trace_spice_vmc_read(int bytes, int len)
{
}

static inline void trace_spice_vmc_register_interface(void * scd)
{
}

static inline void trace_spice_vmc_unregister_interface(void * scd)
{
}

static inline void trace_lm32_pic_raise_irq(void)
{
}

static inline void trace_lm32_pic_lower_irq(void)
{
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
}

static inline void trace_lm32_juart_get_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_get_jrx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jrx(uint32_t value)
{
}

static inline void trace_lm32_timer_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_hit(void)
{
}

static inline void trace_lm32_timer_irq_state(int level)
{
}

static inline void trace_lm32_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_irq_state(int level)
{
}

static inline void trace_lm32_sys_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crrequest(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crreply(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmaw(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmar(void)
{
}

static inline void trace_milkymist_ac97_in_cb(int avail, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_in_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_ac97_out_cb(int free, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_out_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_hpdmc_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_hpdmc_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_write(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_read(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_tx_frame(uint32_t length)
{
}

static inline void trace_milkymist_minimac2_rx_frame(const void * buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_drop_rx_frame(const void * buf)
{
}

static inline void trace_milkymist_minimac2_rx_transfer(const void * buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_raise_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_lower_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_pulse_irq_tx(void)
{
}

static inline void trace_milkymist_pfpu_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_vectout(uint32_t a, uint32_t b, uint32_t dma_ptr)
{
}

static inline void trace_milkymist_pfpu_pulse_irq(void)
{
}

static inline void trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_mevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_kevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_mouse_event(int dx, int dy, int dz, int bs)
{
}

static inline void trace_milkymist_softusb_pulse_irq(void)
{
}

static inline void trace_milkymist_sysctl_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_icap_write(uint32_t value)
{
}

static inline void trace_milkymist_sysctl_start_timer0(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer0(void)
{
}

static inline void trace_milkymist_sysctl_start_timer1(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer1(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer0(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer1(void)
{
}

static inline void trace_milkymist_tmu2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_start(void)
{
}

static inline void trace_milkymist_tmu2_pulse_irq(void)
{
}

static inline void trace_milkymist_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_raise_irq(void)
{
}

static inline void trace_milkymist_uart_lower_irq(void)
{
}

static inline void trace_milkymist_vgafb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_vgafb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_mipsnet_send(uint32_t size)
{
}

static inline void trace_mipsnet_receive(uint32_t size)
{
}

static inline void trace_mipsnet_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_mipsnet_write(uint64_t addr, uint64_t val)
{
}

static inline void trace_mipsnet_irq(uint32_t isr, uint32_t intctl)
{
}

static inline void trace_xen_ram_alloc(unsigned long ram_addr, unsigned long size)
{
}

static inline void trace_xen_client_set_memory(uint64_t start_addr, unsigned long size, bool log_dirty)
{
}

static inline void trace_xen_map_cache(uint64_t phys_addr)
{
}

static inline void trace_xen_remap_bucket(uint64_t index)
{
}

static inline void trace_xen_map_cache_return(void* ptr)
{
}

static inline void trace_xen_map_block(uint64_t phys_addr, uint64_t size)
{
}

static inline void trace_xen_unmap_block(void* addr, unsigned long size)
{
}

static inline void trace_qemu_put_ram_ptr(void* addr)
{
}

static inline void trace_xen_platform_log(char * s)
{
}

static inline void trace_qemu_coroutine_enter(void * from, void * to, void * opaque)
{
}

static inline void trace_qemu_coroutine_yield(void * from, void * to)
{
}

static inline void trace_qemu_coroutine_terminate(void * co)
{
}

static inline void trace_qemu_co_queue_next_bh(void)
{
}

static inline void trace_qemu_co_queue_next(void * nxt)
{
}

static inline void trace_qemu_co_mutex_lock_entry(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_lock_return(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_unlock_entry(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_unlock_return(void * mutex, void * self)
{
}

static inline void trace_escc_put_queue(char channel, int b)
{
}

static inline void trace_escc_get_queue(char channel, int val)
{
}

static inline void trace_escc_update_irq(int irq)
{
}

static inline void trace_escc_update_parameters(char channel, int speed, int parity, int data_bits, int stop_bits)
{
}

static inline void trace_escc_mem_writeb_ctrl(char channel, uint32_t reg, uint32_t val)
{
}

static inline void trace_escc_mem_writeb_data(char channel, uint32_t val)
{
}

static inline void trace_escc_mem_readb_ctrl(char channel, uint32_t reg, uint8_t val)
{
}

static inline void trace_escc_mem_readb_data(char channel, uint32_t ret)
{
}

static inline void trace_escc_serial_receive_byte(char channel, int ch)
{
}

static inline void trace_escc_sunkbd_event_in(int ch)
{
}

static inline void trace_escc_sunkbd_event_out(int ch)
{
}

static inline void trace_escc_kbd_command(int val)
{
}

static inline void trace_escc_sunmouse_event(int dx, int dy, int buttons_state)
{
}

static inline void trace_iscsi_aio_write10_cb(void * iscsi, int status, void * acb, int canceled)
{
}

static inline void trace_iscsi_aio_writev(void * iscsi, int64_t sector_num, int nb_sectors, void * opaque, void * acb)
{
}

static inline void trace_iscsi_aio_read10_cb(void * iscsi, int status, void * acb, int canceled)
{
}

static inline void trace_iscsi_aio_readv(void * iscsi, int64_t sector_num, int nb_sectors, void * opaque, void * acb)
{
}

static inline void trace_esp_raise_irq(void)
{
}

static inline void trace_esp_lower_irq(void)
{
}

static inline void trace_esp_dma_enable(void)
{
}

static inline void trace_esp_dma_disable(void)
{
}

static inline void trace_esp_get_cmd(uint32_t dmalen, int target)
{
}

static inline void trace_esp_do_busid_cmd(uint8_t busid)
{
}

static inline void trace_esp_handle_satn_stop(uint32_t cmdlen)
{
}

static inline void trace_esp_write_response(uint32_t status)
{
}

static inline void trace_esp_do_dma(uint32_t cmdlen, uint32_t len)
{
}

static inline void trace_esp_command_complete(void)
{
}

static inline void trace_esp_command_complete_unexpected(void)
{
}

static inline void trace_esp_command_complete_fail(void)
{
}

static inline void trace_esp_transfer_data(uint32_t dma_left, int32_t ti_size)
{
}

static inline void trace_esp_handle_ti(uint32_t minlen)
{
}

static inline void trace_esp_handle_ti_cmd(uint32_t cmdlen)
{
}

static inline void trace_esp_mem_readb(uint32_t saddr, uint8_t reg)
{
}

static inline void trace_esp_mem_writeb(uint32_t saddr, uint8_t reg, uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_nop(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_flush(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_bus_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_iccs(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_msgacc(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_pad(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_satn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_sel(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatns(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_ensel(uint32_t val)
{
}

static inline void trace_handle_qmp_command(void * mon, const char * cmd_name)
{
}

static inline void trace_monitor_protocol_emitter(void * mon)
{
}

static inline void trace_open_eth_mii_write(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_mii_read(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_update_irq(uint32_t v)
{
}

static inline void trace_open_eth_receive(unsigned len)
{
}

static inline void trace_open_eth_receive_mcast(unsigned idx, uint32_t h0, uint32_t h1)
{
}

static inline void trace_open_eth_receive_reject(void)
{
}

static inline void trace_open_eth_receive_desc(uint32_t addr, uint32_t len_flags)
{
}

static inline void trace_open_eth_start_xmit(uint32_t addr, unsigned len, unsigned tx_len)
{
}

static inline void trace_open_eth_reg_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_reg_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
}

static inline void trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
}

static inline void trace_v9fs_attach_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
}

static inline void trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
}

static inline void trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
}

static inline void trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
}

static inline void trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
}

static inline void trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
}

static inline void trace_v9fs_open_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
}

static inline void trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int32_t iounit)
{
}

static inline void trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
}

static inline void trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
}

static inline void trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
}

static inline void trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
}

static inline void trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
}

static inline void trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
}

static inline void trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
}

static inline void trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
}

static inline void trace_v9fs_create_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
}

static inline void trace_v9fs_symlink_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
}

static inline void trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
}

static inline void trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
}

static inline void trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
}

static inline void trace_v9fs_mknod_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
}

static inline void trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
}

static inline void trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
}

static inline void trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int err)
{
}

static inline void trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
}

static inline void trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
}

static inline void trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, int64_t size, int flags)
{
}

static inline void trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
}

static inline void trace_mmu_helper_dfault(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dprot(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tfault(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_get_phys_addr_code(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_get_phys_addr_data(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_mmu_fault(uint64_t address, uint64_t paddr, int mmu_idx, uint32_t tl, uint64_t prim_context, uint64_t sec_context)
{
}

static inline void trace_int_helper_set_softint(uint32_t softint)
{
}

static inline void trace_int_helper_clear_softint(uint32_t softint)
{
}

static inline void trace_int_helper_write_softint(uint32_t softint)
{
}

static inline void trace_int_helper_icache_freeze(void)
{
}

static inline void trace_int_helper_dcache_freeze(void)
{
}

static inline void trace_win_helper_gregset_error(uint32_t pstate)
{
}

static inline void trace_win_helper_switch_pstate(uint32_t pstate_regs, uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_no_switch_pstate(uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_wrpil(uint32_t psrpil, uint32_t new_pil)
{
}

static inline void trace_win_helper_done(uint32_t tl)
{
}

static inline void trace_win_helper_retry(uint32_t tl)
{
}

static inline void trace_dma_bdrv_io(void * dbs, void * bs, int64_t sector_num, bool to_dev)
{
}

static inline void trace_dma_aio_cancel(void * dbs)
{
}

static inline void trace_dma_complete(void * dbs, int ret, void * cb)
{
}

static inline void trace_dma_bdrv_cb(void * dbs, int ret)
{
}

static inline void trace_dma_map_wait(void * dbs)
{
}

static inline void trace_displaysurface_free(void * display_state, void * display_surface)
{
}

static inline void trace_displaysurface_resize(void * display_state, void * display_surface, int width, int height)
{
}

static inline void trace_ppm_save(const char * filename, void * display_surface)
{
}

static inline void trace_qxl_create_guest_primary(int qid, uint32_t width, uint32_t height, uint64_t mem, uint32_t format, uint32_t position)
{
}

static inline void trace_qxl_create_guest_primary_rest(int qid, int32_t stride, uint32_t type, uint32_t flags)
{
}

static inline void trace_qxl_destroy_primary(int qid)
{
}

static inline void trace_qxl_enter_vga_mode(int qid)
{
}

static inline void trace_qxl_exit_vga_mode(int qid)
{
}

static inline void trace_qxl_hard_reset(int qid, int64_t loadvm)
{
}

static inline void trace_qxl_interface_async_complete_io(int qid, uint32_t current_async, void * cookie)
{
}

static inline void trace_qxl_interface_attach_worker(int qid)
{
}

static inline void trace_qxl_interface_get_init_info(int qid)
{
}

static inline void trace_qxl_interface_set_compression_level(int qid, int64_t level)
{
}

static inline void trace_qxl_interface_update_area_complete(int qid, uint32_t surface_id, uint32_t dirty_left, uint32_t dirty_right, uint32_t dirty_top, uint32_t dirty_bottom)
{
}

static inline void trace_qxl_interface_update_area_complete_rest(int qid, uint32_t num_updated_rects)
{
}

static inline void trace_qxl_interface_update_area_complete_overflow(int qid, int max)
{
}

static inline void trace_qxl_interface_update_area_complete_schedule_bh(int qid, uint32_t num_dirty)
{
}

static inline void trace_qxl_io_destroy_primary_ignored(int qid, const char * mode)
{
}

static inline void trace_qxl_io_read_unexpected(int qid)
{
}

static inline void trace_qxl_io_unexpected_vga_mode(int qid, uint32_t io_port, const char * desc)
{
}

static inline void trace_qxl_io_write(int qid, const char * mode, uint64_t addr, uint64_t val, unsigned size, int async)
{
}

static inline void trace_qxl_memslot_add_guest(int qid, uint32_t slot_id, uint64_t guest_start, uint64_t guest_end)
{
}

static inline void trace_qxl_post_load(int qid, const char * mode)
{
}

static inline void trace_qxl_pre_load(int qid)
{
}

static inline void trace_qxl_pre_save(int qid)
{
}

static inline void trace_qxl_reset_surfaces(int qid)
{
}

static inline void trace_qxl_ring_command_check(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_command_get(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_command_req_notification(int qid)
{
}

static inline void trace_qxl_ring_cursor_check(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_cursor_get(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_cursor_req_notification(int qid)
{
}

static inline void trace_qxl_ring_res_push(int qid, const char * mode, uint32_t surface_count, uint32_t free_res, void * last_release, const char * notify)
{
}

static inline void trace_qxl_ring_res_push_rest(int qid, uint32_t ring_has, uint32_t ring_size, uint32_t prod, uint32_t cons)
{
}

static inline void trace_qxl_ring_res_put(int qid, uint32_t free_res)
{
}

static inline void trace_qxl_set_mode(int qid, int modenr, uint32_t x_res, uint32_t y_res, uint32_t bits, uint64_t devmem)
{
}

static inline void trace_qxl_soft_reset(int qid)
{
}

static inline void trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
}

static inline void trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
}

static inline void trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
}

static inline void trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
}

static inline void trace_qemu_spice_wakeup(uint32_t qid)
{
}

static inline void trace_qemu_spice_start(uint32_t qid)
{
}

static inline void trace_qemu_spice_stop(uint32_t qid)
{
}

static inline void trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
}

static inline void trace_qxl_spice_destroy_surfaces_complete(int qid)
{
}

static inline void trace_qxl_spice_destroy_surfaces(int qid, int async)
{
}

static inline void trace_qxl_spice_destroy_surface_wait_complete(int qid, uint32_t id)
{
}

static inline void trace_qxl_spice_destroy_surface_wait(int qid, uint32_t id, int async)
{
}

static inline void trace_qxl_spice_flush_surfaces_async(int qid, uint32_t surface_count, uint32_t num_free_res)
{
}

static inline void trace_qxl_spice_loadvm_commands(int qid, void * ext, uint32_t count)
{
}

static inline void trace_qxl_spice_oom(int qid)
{
}

static inline void trace_qxl_spice_reset_cursor(int qid)
{
}

static inline void trace_qxl_spice_reset_image_cache(int qid)
{
}

static inline void trace_qxl_spice_reset_memslots(int qid)
{
}

static inline void trace_qxl_spice_update_area(int qid, uint32_t surface_id, uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
}

static inline void trace_qxl_spice_update_area_rest(int qid, uint32_t num_dirty_rects, uint32_t clear_dirty_region)
{
}

static inline void trace_qxl_surfaces_dirty(int qid, int surface, int offset, int size)
{
}

static inline void trace_qxl_render_blit_guest_primary_initialized(void)
{
}

static inline void trace_qxl_render_blit(int32_t stride, int32_t left, int32_t right, int32_t top, int32_t bottom)
{
}

static inline void trace_qxl_render_guest_primary_resized(int32_t width, int32_t height, int32_t stride, int32_t bytes_pp, int32_t bits_pp)
{
}

static inline void trace_qxl_render_update_area_done(void * cookie)
{
}
#define TRACE_G_MALLOC_ENABLED 1
#define TRACE_G_REALLOC_ENABLED 1
#define TRACE_G_FREE_ENABLED 1
#define TRACE_QEMU_MEMALIGN_ENABLED 1
#define TRACE_QEMU_VMALLOC_ENABLED 1
#define TRACE_QEMU_VFREE_ENABLED 1
#define TRACE_VIRTQUEUE_FILL_ENABLED 1
#define TRACE_VIRTQUEUE_FLUSH_ENABLED 1
#define TRACE_VIRTQUEUE_POP_ENABLED 1
#define TRACE_VIRTIO_QUEUE_NOTIFY_ENABLED 1
#define TRACE_VIRTIO_IRQ_ENABLED 1
#define TRACE_VIRTIO_NOTIFY_ENABLED 1
#define TRACE_VIRTIO_SET_STATUS_ENABLED 1
#define TRACE_VIRTIO_SERIAL_SEND_CONTROL_EVENT_ENABLED 1
#define TRACE_VIRTIO_SERIAL_THROTTLE_PORT_ENABLED 1
#define TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE_ENABLED 1
#define TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE_PORT_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_FLUSH_BUF_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_CHR_READ_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_CHR_EVENT_ENABLED 1
#define TRACE_BDRV_OPEN_COMMON_ENABLED 1
#define TRACE_MULTIWRITE_CB_ENABLED 1
#define TRACE_BDRV_AIO_MULTIWRITE_ENABLED 1
#define TRACE_BDRV_AIO_DISCARD_ENABLED 1
#define TRACE_BDRV_AIO_FLUSH_ENABLED 1
#define TRACE_BDRV_AIO_READV_ENABLED 1
#define TRACE_BDRV_AIO_WRITEV_ENABLED 1
#define TRACE_BDRV_LOCK_MEDIUM_ENABLED 1
#define TRACE_BDRV_CO_READV_ENABLED 1
#define TRACE_BDRV_CO_COPY_ON_READV_ENABLED 1
#define TRACE_BDRV_CO_WRITEV_ENABLED 1
#define TRACE_BDRV_CO_WRITE_ZEROES_ENABLED 1
#define TRACE_BDRV_CO_IO_EM_ENABLED 1
#define TRACE_BDRV_CO_DO_COPY_ON_READV_ENABLED 1
#define TRACE_STREAM_ONE_ITERATION_ENABLED 1
#define TRACE_STREAM_START_ENABLED 1
#define TRACE_QMP_BLOCK_JOB_CANCEL_ENABLED 1
#define TRACE_BLOCK_STREAM_CB_ENABLED 1
#define TRACE_QMP_BLOCK_STREAM_ENABLED 1
#define TRACE_VIRTIO_BLK_REQ_COMPLETE_ENABLED 1
#define TRACE_VIRTIO_BLK_RW_COMPLETE_ENABLED 1
#define TRACE_VIRTIO_BLK_HANDLE_WRITE_ENABLED 1
#define TRACE_VIRTIO_BLK_HANDLE_READ_ENABLED 1
#define TRACE_PAIO_SUBMIT_ENABLED 1
#define TRACE_PAIO_COMPLETE_ENABLED 1
#define TRACE_PAIO_CANCEL_ENABLED 1
#define TRACE_CPU_IN_ENABLED 1
#define TRACE_CPU_OUT_ENABLED 1
#define TRACE_BALLOON_EVENT_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_CS4231_MEM_READL_DREG_ENABLED 1
#define TRACE_CS4231_MEM_READL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_DREG_ENABLED 1
#define TRACE_NVRAM_READ_ENABLED 1
#define TRACE_NVRAM_WRITE_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MER_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MDR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_VCR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_DR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR1_ENABLED 1
#define TRACE_ECC_MEM_READL_MER_ENABLED 1
#define TRACE_ECC_MEM_READL_MDR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_READL_VCR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR0_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR1_ENABLED 1
#define TRACE_ECC_MEM_READL_DR_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR1_ENABLED 1
#define TRACE_ECC_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_ECC_DIAG_MEM_READB_ENABLED 1
#define TRACE_JAZZ_LED_READ_ENABLED 1
#define TRACE_JAZZ_LED_WRITE_ENABLED 1
#define TRACE_LANCE_MEM_READW_ENABLED 1
#define TRACE_LANCE_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_ENABLED 1
#define TRACE_SLAVIO_SET_POWER_FAIL_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_READB_ENABLED 1
#define TRACE_APC_MEM_WRITEB_ENABLED 1
#define TRACE_APC_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_READW_ENABLED 1
#define TRACE_SLAVIO_TIMER_GET_OUT_ENABLED 1
#define TRACE_SLAVIO_TIMER_IRQ_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_ENABLED 1
#define TRACE_LEDMA_MEMORY_READ_ENABLED 1
#define TRACE_LEDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_LOWER_ENABLED 1
#define TRACE_ESPDMA_MEMORY_READ_ENABLED 1
#define TRACE_ESPDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_READL_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_WRITEL_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_LOWER_ENABLED 1
#define TRACE_SUN4M_CPU_INTERRUPT_ENABLED 1
#define TRACE_SUN4M_CPU_RESET_INTERRUPT_ENABLED 1
#define TRACE_SUN4M_CPU_SET_IRQ_RAISE_ENABLED 1
#define TRACE_SUN4M_CPU_SET_IRQ_LOWER_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_READL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS_ENABLED 1
#define TRACE_SUN4M_IOMMU_TRANSLATE_PA_ENABLED 1
#define TRACE_SUN4M_IOMMU_BAD_ADDR_ENABLED 1
#define TRACE_USB_PACKET_STATE_CHANGE_ENABLED 1
#define TRACE_USB_PACKET_STATE_FAULT_ENABLED 1
#define TRACE_USB_PORT_CLAIM_ENABLED 1
#define TRACE_USB_PORT_ATTACH_ENABLED 1
#define TRACE_USB_PORT_DETACH_ENABLED 1
#define TRACE_USB_PORT_RELEASE_ENABLED 1
#define TRACE_USB_EHCI_RESET_ENABLED 1
#define TRACE_USB_EHCI_MMIO_READL_ENABLED 1
#define TRACE_USB_EHCI_MMIO_WRITEL_ENABLED 1
#define TRACE_USB_EHCI_MMIO_CHANGE_ENABLED 1
#define TRACE_USB_EHCI_USBSTS_ENABLED 1
#define TRACE_USB_EHCI_STATE_ENABLED 1
#define TRACE_USB_EHCI_QH_PTRS_ENABLED 1
#define TRACE_USB_EHCI_QH_FIELDS_ENABLED 1
#define TRACE_USB_EHCI_QH_BITS_ENABLED 1
#define TRACE_USB_EHCI_QTD_PTRS_ENABLED 1
#define TRACE_USB_EHCI_QTD_FIELDS_ENABLED 1
#define TRACE_USB_EHCI_QTD_BITS_ENABLED 1
#define TRACE_USB_EHCI_ITD_ENABLED 1
#define TRACE_USB_EHCI_SITD_ENABLED 1
#define TRACE_USB_EHCI_PORT_ATTACH_ENABLED 1
#define TRACE_USB_EHCI_PORT_DETACH_ENABLED 1
#define TRACE_USB_EHCI_PORT_RESET_ENABLED 1
#define TRACE_USB_EHCI_DATA_ENABLED 1
#define TRACE_USB_EHCI_QUEUE_ACTION_ENABLED 1
#define TRACE_USB_UHCI_RESET_ENABLED 1
#define TRACE_USB_UHCI_SCHEDULE_START_ENABLED 1
#define TRACE_USB_UHCI_SCHEDULE_STOP_ENABLED 1
#define TRACE_USB_UHCI_FRAME_START_ENABLED 1
#define TRACE_USB_UHCI_FRAME_LOOP_STOP_IDLE_ENABLED 1
#define TRACE_USB_UHCI_FRAME_LOOP_STOP_BANDWIDTH_ENABLED 1
#define TRACE_USB_UHCI_FRAME_LOOP_CONTINUE_ENABLED 1
#define TRACE_USB_UHCI_MMIO_READW_ENABLED 1
#define TRACE_USB_UHCI_MMIO_WRITEW_ENABLED 1
#define TRACE_USB_UHCI_MMIO_READL_ENABLED 1
#define TRACE_USB_UHCI_MMIO_WRITEL_ENABLED 1
#define TRACE_USB_UHCI_QUEUE_ADD_ENABLED 1
#define TRACE_USB_UHCI_QUEUE_DEL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_ADD_ENABLED 1
#define TRACE_USB_UHCI_PACKET_LINK_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_PACKET_UNLINK_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_PACKET_CANCEL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_SUCCESS_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_SHORTXFER_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_STALL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_BABBLE_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_ERROR_ENABLED 1
#define TRACE_USB_UHCI_PACKET_DEL_ENABLED 1
#define TRACE_USB_UHCI_QH_LOAD_ENABLED 1
#define TRACE_USB_UHCI_TD_LOAD_ENABLED 1
#define TRACE_USB_UHCI_TD_QUEUE_ENABLED 1
#define TRACE_USB_UHCI_TD_NEXTQH_ENABLED 1
#define TRACE_USB_UHCI_TD_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_TD_COMPLETE_ENABLED 1
#define TRACE_USB_DESC_DEVICE_ENABLED 1
#define TRACE_USB_DESC_DEVICE_QUALIFIER_ENABLED 1
#define TRACE_USB_DESC_CONFIG_ENABLED 1
#define TRACE_USB_DESC_OTHER_SPEED_CONFIG_ENABLED 1
#define TRACE_USB_DESC_STRING_ENABLED 1
#define TRACE_USB_SET_ADDR_ENABLED 1
#define TRACE_USB_SET_CONFIG_ENABLED 1
#define TRACE_USB_SET_INTERFACE_ENABLED 1
#define TRACE_USB_CLEAR_DEVICE_FEATURE_ENABLED 1
#define TRACE_USB_SET_DEVICE_FEATURE_ENABLED 1
#define TRACE_USB_HUB_RESET_ENABLED 1
#define TRACE_USB_HUB_CONTROL_ENABLED 1
#define TRACE_USB_HUB_GET_PORT_STATUS_ENABLED 1
#define TRACE_USB_HUB_SET_PORT_FEATURE_ENABLED 1
#define TRACE_USB_HUB_CLEAR_PORT_FEATURE_ENABLED 1
#define TRACE_USB_HUB_ATTACH_ENABLED 1
#define TRACE_USB_HUB_DETACH_ENABLED 1
#define TRACE_USB_HOST_OPEN_STARTED_ENABLED 1
#define TRACE_USB_HOST_OPEN_SUCCESS_ENABLED 1
#define TRACE_USB_HOST_OPEN_FAILURE_ENABLED 1
#define TRACE_USB_HOST_DISCONNECT_ENABLED 1
#define TRACE_USB_HOST_CLOSE_ENABLED 1
#define TRACE_USB_HOST_SET_ADDRESS_ENABLED 1
#define TRACE_USB_HOST_SET_CONFIG_ENABLED 1
#define TRACE_USB_HOST_SET_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_CLAIM_INTERFACES_ENABLED 1
#define TRACE_USB_HOST_RELEASE_INTERFACES_ENABLED 1
#define TRACE_USB_HOST_REQ_CONTROL_ENABLED 1
#define TRACE_USB_HOST_REQ_DATA_ENABLED 1
#define TRACE_USB_HOST_REQ_COMPLETE_ENABLED 1
#define TRACE_USB_HOST_REQ_EMULATED_ENABLED 1
#define TRACE_USB_HOST_REQ_CANCELED_ENABLED 1
#define TRACE_USB_HOST_URB_SUBMIT_ENABLED 1
#define TRACE_USB_HOST_URB_COMPLETE_ENABLED 1
#define TRACE_USB_HOST_URB_CANCELED_ENABLED 1
#define TRACE_USB_HOST_EP_SET_HALT_ENABLED 1
#define TRACE_USB_HOST_EP_CLEAR_HALT_ENABLED 1
#define TRACE_USB_HOST_EP_START_ISO_ENABLED 1
#define TRACE_USB_HOST_EP_STOP_ISO_ENABLED 1
#define TRACE_USB_HOST_RESET_ENABLED 1
#define TRACE_USB_HOST_AUTO_SCAN_ENABLED_ENABLED 1
#define TRACE_USB_HOST_AUTO_SCAN_DISABLED_ENABLED 1
#define TRACE_USB_HOST_CLAIM_PORT_ENABLED 1
#define TRACE_USB_HOST_PARSE_DEVICE_ENABLED 1
#define TRACE_USB_HOST_PARSE_CONFIG_ENABLED 1
#define TRACE_USB_HOST_PARSE_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_PARSE_ENDPOINT_ENABLED 1
#define TRACE_USB_HOST_PARSE_UNKNOWN_ENABLED 1
#define TRACE_USB_HOST_PARSE_ERROR_ENABLED 1
#define TRACE_SCSI_REQ_ALLOC_ENABLED 1
#define TRACE_SCSI_REQ_DATA_ENABLED 1
#define TRACE_SCSI_REQ_DATA_CANCELED_ENABLED 1
#define TRACE_SCSI_REQ_DEQUEUE_ENABLED 1
#define TRACE_SCSI_REQ_CONTINUE_ENABLED 1
#define TRACE_SCSI_REQ_PARSED_ENABLED 1
#define TRACE_SCSI_REQ_PARSED_LBA_ENABLED 1
#define TRACE_SCSI_REQ_PARSE_BAD_ENABLED 1
#define TRACE_SCSI_REQ_BUILD_SENSE_ENABLED 1
#define TRACE_SCSI_REPORT_LUNS_ENABLED 1
#define TRACE_SCSI_INQUIRY_ENABLED 1
#define TRACE_SCSI_TEST_UNIT_READY_ENABLED 1
#define TRACE_SCSI_REQUEST_SENSE_ENABLED 1
#define TRACE_VM_STATE_NOTIFY_ENABLED 1
#define TRACE_QCOW2_WRITEV_START_REQ_ENABLED 1
#define TRACE_QCOW2_WRITEV_DONE_REQ_ENABLED 1
#define TRACE_QCOW2_WRITEV_START_PART_ENABLED 1
#define TRACE_QCOW2_WRITEV_DONE_PART_ENABLED 1
#define TRACE_QCOW2_WRITEV_DATA_ENABLED 1
#define TRACE_QCOW2_ALLOC_CLUSTERS_OFFSET_ENABLED 1
#define TRACE_QCOW2_DO_ALLOC_CLUSTERS_OFFSET_ENABLED 1
#define TRACE_QCOW2_CLUSTER_ALLOC_PHYS_ENABLED 1
#define TRACE_QCOW2_CLUSTER_LINK_L2_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_GET_EMPTY_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_WRITE_L2_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_WRITE_L1_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_DONE_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_REPLACE_ENTRY_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_READ_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_DONE_ENABLED 1
#define TRACE_QCOW2_CACHE_FLUSH_ENABLED 1
#define TRACE_QCOW2_CACHE_ENTRY_FLUSH_ENABLED 1
#define TRACE_QED_ALLOC_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_UNREF_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_FIND_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_READ_TABLE_ENABLED 1
#define TRACE_QED_READ_TABLE_CB_ENABLED 1
#define TRACE_QED_WRITE_TABLE_ENABLED 1
#define TRACE_QED_WRITE_TABLE_CB_ENABLED 1
#define TRACE_QED_NEED_CHECK_TIMER_CB_ENABLED 1
#define TRACE_QED_START_NEED_CHECK_TIMER_ENABLED 1
#define TRACE_QED_CANCEL_NEED_CHECK_TIMER_ENABLED 1
#define TRACE_QED_AIO_COMPLETE_ENABLED 1
#define TRACE_QED_AIO_SETUP_ENABLED 1
#define TRACE_QED_AIO_NEXT_IO_ENABLED 1
#define TRACE_QED_AIO_READ_DATA_ENABLED 1
#define TRACE_QED_AIO_WRITE_DATA_ENABLED 1
#define TRACE_QED_AIO_WRITE_PREFILL_ENABLED 1
#define TRACE_QED_AIO_WRITE_POSTFILL_ENABLED 1
#define TRACE_QED_AIO_WRITE_MAIN_ENABLED 1
#define TRACE_G364FB_READ_ENABLED 1
#define TRACE_G364FB_WRITE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_ENABLE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_DISABLED_ENABLED 1
#define TRACE_GRLIB_GPTIMER_RESTART_ENABLED 1
#define TRACE_GRLIB_GPTIMER_SET_SCALER_ENABLED 1
#define TRACE_GRLIB_GPTIMER_HIT_ENABLED 1
#define TRACE_GRLIB_GPTIMER_READL_ENABLED 1
#define TRACE_GRLIB_GPTIMER_WRITEL_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_APBUART_EVENT_ENABLED 1
#define TRACE_GRLIB_APBUART_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_APBUART_READL_UNKNOWN_ENABLED 1
#define TRACE_LEON3_SET_IRQ_ENABLED 1
#define TRACE_LEON3_RESET_IRQ_ENABLED 1
#define TRACE_SPICE_VMC_WRITE_ENABLED 1
#define TRACE_SPICE_VMC_READ_ENABLED 1
#define TRACE_SPICE_VMC_REGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_ENABLED 1
#define TRACE_LM32_PIC_RAISE_IRQ_ENABLED 1
#define TRACE_LM32_PIC_LOWER_IRQ_ENABLED 1
#define TRACE_LM32_PIC_INTERRUPT_ENABLED 1
#define TRACE_LM32_PIC_SET_IM_ENABLED 1
#define TRACE_LM32_PIC_SET_IP_ENABLED 1
#define TRACE_LM32_PIC_GET_IM_ENABLED 1
#define TRACE_LM32_PIC_GET_IP_ENABLED 1
#define TRACE_LM32_JUART_GET_JTX_ENABLED 1
#define TRACE_LM32_JUART_SET_JTX_ENABLED 1
#define TRACE_LM32_JUART_GET_JRX_ENABLED 1
#define TRACE_LM32_JUART_SET_JRX_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_WRITE_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_READ_ENABLED 1
#define TRACE_LM32_TIMER_HIT_ENABLED 1
#define TRACE_LM32_TIMER_IRQ_STATE_ENABLED 1
#define TRACE_LM32_UART_MEMORY_WRITE_ENABLED 1
#define TRACE_LM32_UART_MEMORY_READ_ENABLED 1
#define TRACE_LM32_UART_IRQ_STATE_ENABLED 1
#define TRACE_LM32_SYS_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_AC97_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_AC97_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREQUEST_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREPLY_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAW_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAR_ENABLED 1
#define TRACE_MILKYMIST_AC97_IN_CB_ENABLED 1
#define TRACE_MILKYMIST_AC97_IN_CB_TRANSFERRED_ENABLED 1
#define TRACE_MILKYMIST_AC97_OUT_CB_ENABLED 1
#define TRACE_MILKYMIST_AC97_OUT_CB_TRANSFERRED_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MDIO_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MDIO_READ_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_TX_FRAME_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RX_FRAME_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_DROP_RX_FRAME_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RX_TRANSFER_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RAISE_IRQ_RX_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_LOWER_IRQ_RX_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_PULSE_IRQ_TX_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_PFPU_VECTOUT_ENABLED 1
#define TRACE_MILKYMIST_PFPU_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_KEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MOUSE_EVENT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_TMU2_START_ENABLED 1
#define TRACE_MILKYMIST_TMU2_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_UART_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_UART_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_UART_RAISE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_UART_LOWER_IRQ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_WRITE_ENABLED 1
#define TRACE_MIPSNET_SEND_ENABLED 1
#define TRACE_MIPSNET_RECEIVE_ENABLED 1
#define TRACE_MIPSNET_READ_ENABLED 1
#define TRACE_MIPSNET_WRITE_ENABLED 1
#define TRACE_MIPSNET_IRQ_ENABLED 1
#define TRACE_XEN_RAM_ALLOC_ENABLED 1
#define TRACE_XEN_CLIENT_SET_MEMORY_ENABLED 1
#define TRACE_XEN_MAP_CACHE_ENABLED 1
#define TRACE_XEN_REMAP_BUCKET_ENABLED 1
#define TRACE_XEN_MAP_CACHE_RETURN_ENABLED 1
#define TRACE_XEN_MAP_BLOCK_ENABLED 1
#define TRACE_XEN_UNMAP_BLOCK_ENABLED 1
#define TRACE_QEMU_PUT_RAM_PTR_ENABLED 1
#define TRACE_XEN_PLATFORM_LOG_ENABLED 1
#define TRACE_QEMU_COROUTINE_ENTER_ENABLED 1
#define TRACE_QEMU_COROUTINE_YIELD_ENABLED 1
#define TRACE_QEMU_COROUTINE_TERMINATE_ENABLED 1
#define TRACE_QEMU_CO_QUEUE_NEXT_BH_ENABLED 1
#define TRACE_QEMU_CO_QUEUE_NEXT_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_LOCK_ENTRY_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_LOCK_RETURN_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_UNLOCK_ENTRY_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_UNLOCK_RETURN_ENABLED 1
#define TRACE_ESCC_PUT_QUEUE_ENABLED 1
#define TRACE_ESCC_GET_QUEUE_ENABLED 1
#define TRACE_ESCC_UPDATE_IRQ_ENABLED 1
#define TRACE_ESCC_UPDATE_PARAMETERS_ENABLED 1
#define TRACE_ESCC_MEM_WRITEB_CTRL_ENABLED 1
#define TRACE_ESCC_MEM_WRITEB_DATA_ENABLED 1
#define TRACE_ESCC_MEM_READB_CTRL_ENABLED 1
#define TRACE_ESCC_MEM_READB_DATA_ENABLED 1
#define TRACE_ESCC_SERIAL_RECEIVE_BYTE_ENABLED 1
#define TRACE_ESCC_SUNKBD_EVENT_IN_ENABLED 1
#define TRACE_ESCC_SUNKBD_EVENT_OUT_ENABLED 1
#define TRACE_ESCC_KBD_COMMAND_ENABLED 1
#define TRACE_ESCC_SUNMOUSE_EVENT_ENABLED 1
#define TRACE_ISCSI_AIO_WRITE10_CB_ENABLED 1
#define TRACE_ISCSI_AIO_WRITEV_ENABLED 1
#define TRACE_ISCSI_AIO_READ10_CB_ENABLED 1
#define TRACE_ISCSI_AIO_READV_ENABLED 1
#define TRACE_ESP_RAISE_IRQ_ENABLED 1
#define TRACE_ESP_LOWER_IRQ_ENABLED 1
#define TRACE_ESP_DMA_ENABLE_ENABLED 1
#define TRACE_ESP_DMA_DISABLE_ENABLED 1
#define TRACE_ESP_GET_CMD_ENABLED 1
#define TRACE_ESP_DO_BUSID_CMD_ENABLED 1
#define TRACE_ESP_HANDLE_SATN_STOP_ENABLED 1
#define TRACE_ESP_WRITE_RESPONSE_ENABLED 1
#define TRACE_ESP_DO_DMA_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_UNEXPECTED_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_FAIL_ENABLED 1
#define TRACE_ESP_TRANSFER_DATA_ENABLED 1
#define TRACE_ESP_HANDLE_TI_ENABLED 1
#define TRACE_ESP_HANDLE_TI_CMD_ENABLED 1
#define TRACE_ESP_MEM_READB_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_NOP_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_FLUSH_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_RESET_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_BUS_RESET_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_ICCS_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_MSGACC_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_PAD_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SATN_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SEL_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SELATN_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SELATNS_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_ENSEL_ENABLED 1
#define TRACE_HANDLE_QMP_COMMAND_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EMITTER_ENABLED 1
#define TRACE_OPEN_ETH_MII_WRITE_ENABLED 1
#define TRACE_OPEN_ETH_MII_READ_ENABLED 1
#define TRACE_OPEN_ETH_UPDATE_IRQ_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_MCAST_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_REJECT_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_DESC_ENABLED 1
#define TRACE_OPEN_ETH_START_XMIT_ENABLED 1
#define TRACE_OPEN_ETH_REG_READ_ENABLED 1
#define TRACE_OPEN_ETH_REG_WRITE_ENABLED 1
#define TRACE_OPEN_ETH_DESC_READ_ENABLED 1
#define TRACE_OPEN_ETH_DESC_WRITE_ENABLED 1
#define TRACE_V9FS_RERROR_ENABLED 1
#define TRACE_V9FS_VERSION_ENABLED 1
#define TRACE_V9FS_VERSION_RETURN_ENABLED 1
#define TRACE_V9FS_ATTACH_ENABLED 1
#define TRACE_V9FS_ATTACH_RETURN_ENABLED 1
#define TRACE_V9FS_STAT_ENABLED 1
#define TRACE_V9FS_STAT_RETURN_ENABLED 1
#define TRACE_V9FS_GETATTR_ENABLED 1
#define TRACE_V9FS_GETATTR_RETURN_ENABLED 1
#define TRACE_V9FS_WALK_ENABLED 1
#define TRACE_V9FS_WALK_RETURN_ENABLED 1
#define TRACE_V9FS_OPEN_ENABLED 1
#define TRACE_V9FS_OPEN_RETURN_ENABLED 1
#define TRACE_V9FS_LCREATE_ENABLED 1
#define TRACE_V9FS_LCREATE_RETURN_ENABLED 1
#define TRACE_V9FS_FSYNC_ENABLED 1
#define TRACE_V9FS_CLUNK_ENABLED 1
#define TRACE_V9FS_READ_ENABLED 1
#define TRACE_V9FS_READ_RETURN_ENABLED 1
#define TRACE_V9FS_READDIR_ENABLED 1
#define TRACE_V9FS_READDIR_RETURN_ENABLED 1
#define TRACE_V9FS_WRITE_ENABLED 1
#define TRACE_V9FS_WRITE_RETURN_ENABLED 1
#define TRACE_V9FS_CREATE_ENABLED 1
#define TRACE_V9FS_CREATE_RETURN_ENABLED 1
#define TRACE_V9FS_SYMLINK_ENABLED 1
#define TRACE_V9FS_SYMLINK_RETURN_ENABLED 1
#define TRACE_V9FS_FLUSH_ENABLED 1
#define TRACE_V9FS_LINK_ENABLED 1
#define TRACE_V9FS_REMOVE_ENABLED 1
#define TRACE_V9FS_WSTAT_ENABLED 1
#define TRACE_V9FS_MKNOD_ENABLED 1
#define TRACE_V9FS_MKNOD_RETURN_ENABLED 1
#define TRACE_V9FS_LOCK_ENABLED 1
#define TRACE_V9FS_LOCK_RETURN_ENABLED 1
#define TRACE_V9FS_GETLOCK_ENABLED 1
#define TRACE_V9FS_GETLOCK_RETURN_ENABLED 1
#define TRACE_V9FS_MKDIR_ENABLED 1
#define TRACE_V9FS_MKDIR_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRWALK_ENABLED 1
#define TRACE_V9FS_XATTRWALK_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRCREATE_ENABLED 1
#define TRACE_V9FS_READLINK_ENABLED 1
#define TRACE_V9FS_READLINK_RETURN_ENABLED 1
#define TRACE_MMU_HELPER_DFAULT_ENABLED 1
#define TRACE_MMU_HELPER_DPROT_ENABLED 1
#define TRACE_MMU_HELPER_DMISS_ENABLED 1
#define TRACE_MMU_HELPER_TFAULT_ENABLED 1
#define TRACE_MMU_HELPER_TMISS_ENABLED 1
#define TRACE_MMU_HELPER_GET_PHYS_ADDR_CODE_ENABLED 1
#define TRACE_MMU_HELPER_GET_PHYS_ADDR_DATA_ENABLED 1
#define TRACE_MMU_HELPER_MMU_FAULT_ENABLED 1
#define TRACE_INT_HELPER_SET_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_CLEAR_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_WRITE_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_ICACHE_FREEZE_ENABLED 1
#define TRACE_INT_HELPER_DCACHE_FREEZE_ENABLED 1
#define TRACE_WIN_HELPER_GREGSET_ERROR_ENABLED 1
#define TRACE_WIN_HELPER_SWITCH_PSTATE_ENABLED 1
#define TRACE_WIN_HELPER_NO_SWITCH_PSTATE_ENABLED 1
#define TRACE_WIN_HELPER_WRPIL_ENABLED 1
#define TRACE_WIN_HELPER_DONE_ENABLED 1
#define TRACE_WIN_HELPER_RETRY_ENABLED 1
#define TRACE_DMA_BDRV_IO_ENABLED 1
#define TRACE_DMA_AIO_CANCEL_ENABLED 1
#define TRACE_DMA_COMPLETE_ENABLED 1
#define TRACE_DMA_BDRV_CB_ENABLED 1
#define TRACE_DMA_MAP_WAIT_ENABLED 1
#define TRACE_DISPLAYSURFACE_FREE_ENABLED 1
#define TRACE_DISPLAYSURFACE_RESIZE_ENABLED 1
#define TRACE_PPM_SAVE_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_MM_TIME_ENABLED 0
#define TRACE_QXL_IO_WRITE_VGA_ENABLED 0
#define TRACE_QXL_CREATE_GUEST_PRIMARY_ENABLED 1
#define TRACE_QXL_CREATE_GUEST_PRIMARY_REST_ENABLED 1
#define TRACE_QXL_DESTROY_PRIMARY_ENABLED 1
#define TRACE_QXL_ENTER_VGA_MODE_ENABLED 1
#define TRACE_QXL_EXIT_VGA_MODE_ENABLED 1
#define TRACE_QXL_HARD_RESET_ENABLED 1
#define TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO_ENABLED 1
#define TRACE_QXL_INTERFACE_ATTACH_WORKER_ENABLED 1
#define TRACE_QXL_INTERFACE_GET_INIT_INFO_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH_ENABLED 1
#define TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED_ENABLED 1
#define TRACE_QXL_IO_READ_UNEXPECTED_ENABLED 1
#define TRACE_QXL_IO_UNEXPECTED_VGA_MODE_ENABLED 1
#define TRACE_QXL_IO_WRITE_ENABLED 1
#define TRACE_QXL_MEMSLOT_ADD_GUEST_ENABLED 1
#define TRACE_QXL_POST_LOAD_ENABLED 1
#define TRACE_QXL_PRE_LOAD_ENABLED 1
#define TRACE_QXL_PRE_SAVE_ENABLED 1
#define TRACE_QXL_RESET_SURFACES_ENABLED 1
#define TRACE_QXL_RING_COMMAND_CHECK_ENABLED 1
#define TRACE_QXL_RING_COMMAND_GET_ENABLED 1
#define TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_CURSOR_CHECK_ENABLED 1
#define TRACE_QXL_RING_CURSOR_GET_ENABLED 1
#define TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_REST_ENABLED 1
#define TRACE_QXL_RING_RES_PUT_ENABLED 1
#define TRACE_QXL_SET_MODE_ENABLED 1
#define TRACE_QXL_SOFT_RESET_ENABLED 1
#define TRACE_QEMU_SPICE_ADD_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_DEL_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_WAKEUP_ENABLED 1
#define TRACE_QEMU_SPICE_START_ENABLED 1
#define TRACE_QEMU_SPICE_STOP_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_UPDATE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_ENABLED 1
#define TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC_ENABLED 1
#define TRACE_QXL_SPICE_LOADVM_COMMANDS_ENABLED 1
#define TRACE_QXL_SPICE_OOM_ENABLED 1
#define TRACE_QXL_SPICE_RESET_CURSOR_ENABLED 1
#define TRACE_QXL_SPICE_RESET_IMAGE_CACHE_ENABLED 1
#define TRACE_QXL_SPICE_RESET_MEMSLOTS_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_REST_ENABLED 1
#define TRACE_QXL_SURFACES_DIRTY_ENABLED 1
#define TRACE_QXL_RENDER_BLIT_GUEST_PRIMARY_INITIALIZED_ENABLED 1
#define TRACE_QXL_RENDER_BLIT_ENABLED 1
#define TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED_ENABLED 1
#define TRACE_QXL_RENDER_UPDATE_AREA_DONE_ENABLED 1

#endif /* TRACE_H */
